from collections import defaultdict

with open("input 12.txt") as file:
    F = [list(x) for x in file.read().split()]

W, H = len(F), len(F[0])
a, p, c = defaultdict(int), defaultdict(int), defaultdict(int)
CC = [[0]*W for _ in range(H)]
seen = {}
numcc = 0
def dfs(x, y):
    global numcc
    if (x, y) in seen: return
    seen[(x, y)] = 1
    CC[y][x] = numcc
    if x > 0 and F[y][x-1] == F[y][x]: dfs(x-1, y)
    if x < W-1 and F[y][x+1] == F[y][x]: dfs(x+1, y)
    if y > 0 and F[y-1][x] == F[y][x]: dfs(x, y-1)
    if y < H-1 and F[y+1][x] == F[y][x]: dfs(x, y+1)

for y in range(H):
    for x in range(W):
        if (x, y) not in seen:
            dfs(x, y); numcc += 1

def get(x, y):
    if x < 0 or x >= W or y < 0 or y >= H: return -1
    return CC[y][x]

for y in range(H):
    for x in range(W):
        for dx, dy in [(-1,-1),(-1,1),(1,-1),(1,1)]:
            A, B, C, D = get(x, y), get(x+dx, y), get(x, y+dy), get(x+dx, y+dy)
            if (A != B and A != C) or (A == B and A == C and A != D): c[A] += 1
        k = 4
        A, B, C = get(x, y), get(x-1, y), get(x, y-1)
        if A == B: k -= 2
        if A == C: k -= 2
        a[A] += 1; p[A] += k

print(sum(a[x]*p[x] for x in a))
print(sum(a[x]*c[x] for x in a))
