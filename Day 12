from collections import defaultdict

with open("input 12.txt") as file:
    data = [list(x) for x in file.read().split()]

w, h = len(data), len(data[0])
area, perim, corners = defaultdict(int), defaultdict(int), defaultdict(int)

cc = [[0] * w for _ in range(len(data))]
seen = {}
numcc = 0

def dfs(x, y):
    global numcc
    if (x,y) in seen: return
    seen[(x,y)] = True
    cc[y][x] = numcc
    if x > 0 and data[y][x-1] == data[y][x]: dfs(x - 1, y)
    if x < w - 1 and data[y][x+1] == data[y][x]: dfs(x + 1,y)
    if y > 0 and data[y-1][x] == data[y][x]: dfs(x,y - 1)
    if y < h - 1 and data[y+1][x] == data[y][x]: dfs(x, y + 1)

for y in range(h):
    for x in range(w):
        if (x, y) not in seen:
            dfs(x, y); numcc += 1

def get(x, y):
    global w, h
    if x < 0 or x >= w or y < 0 or y >= h: return -1
    return cc[y][x]

for y in range(h):
    for x in range(w):
        for dx, dy in ((-1, -1),(-1, 1),(1, -1),(1, 1)):
            a, b, c, d = get(x,y), get(x + dx, y), get(x, y + dy),get(x + dx, y + dy)
            if (a != b and a != c) or (a == b and a == c and a != d): corners[a] += 1
        k = 4
        a, b, c = get(x, y), get(x - 1, y), get(x, y - 1)
        if a == b: k -= 2
        if a == c: k -= 2
        area[a] += 1; perim[a] += k

tot = sum(area[x] * perim[x] for x in area)
t = sum(area[x] * corners[x] for x in area)
print(tot, t)
