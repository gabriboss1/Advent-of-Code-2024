from functools import cache

@cache
def bdp(x, y, dx, dy, r, inv):
    q, res = [(x, y, "")], None
    while q:
        x, y, p = q.pop(0)
        if (x, y) == (dx, dy):
            res = mn(res, br(p + "A", r - 1))
        elif (x, y) != inv:
            q.extend((x + ox, y + oy, p + v)
                for ox, oy, v in ((-1, 0, "<"), (1, 0, ">"), (0, -1, "^"), (0, 1, "v"))
                if idir(x, dx, ox) or idir(y, dy, oy))
    return res

@cache
def br(p, r):
    if r == 1:
        return len(p)
    res, pd = 0, dpad(".^A<v>", 3)
    x, y = pd["A"]
    for v in p:
        dx, dy = pd[v]
        res += bdp(x, y, dx, dy, r, pd["."])
        x, y = dx, dy
    return res

def mn(*vals): return min(x for x in vals if x is not None)

def dpad(layout, w): return {v: (i % w, i // w) for i, v in enumerate(layout)}

def idir(st, dst, c): return c * (dst - st) > 0

def chp(x, y, dx, dy, r, inv):
    q, res = [(x, y, "")], None
    while q:
        x, y, p = q.pop(0)
        if (x, y) == (dx, dy):
            res = mn(res, br(p + "A", r))
        elif (x, y) != inv:
            q.extend((x + ox, y + oy, p + v)
                for ox, oy, v in ((-1, 0, "<"), (1, 0, ">"), (0, -1, "^"), (0, 1, "v"))
                if idir(x, dx, ox) or idir(y, dy, oy))
    return res

def calc(vals, m):
    pd, total = dpad("789456123.0A", 3), 0
    for row in vals:
        res, x, y = 0, *pd["A"]
        for v in row:
            dx, dy = pd[v]
            res += chp(x, y, dx, dy, m, pd["."])
            x, y = dx, dy
        total += res * int(row[:-1].lstrip("0"))
    return total

with open("input 21.txt") as f:
    vals = [line.strip() for line in f]
print(calc(vals, 3), calc(vals, 26))
